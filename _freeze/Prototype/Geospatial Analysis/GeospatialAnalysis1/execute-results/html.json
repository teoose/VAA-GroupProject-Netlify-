{
  "hash": "c3cadf07c38ced1ba76f7859e843e060",
  "result": {
    "markdown": "---\ntitle: \"Geospatial Analysis1 - Local Measures of Spatial Autocorrelation\"\ndate: \"17 March 2024\"\ndate-modified: \"last-modified\"\nauthor: \"Imran Ibrahim\"\ntoc: true\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n  warning: false\n  message: false\n---\n\n\n# Overview\n\nIn this page, I will be exploring the codes for the plots in our Geospatial Analysis module of our Shiny Application. Specifically, I will be plotting for **Local Measures of Spatial Autocorrelation**\n\n## Loading R packages and Data prep\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, dplyr, tidyr, \n               sf, lubridate,plotly,\n               tmap, spdep, sfdep)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\npackage 'sfdep' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n\tC:\\Users\\suane\\AppData\\Local\\Temp\\Rtmp6zK0uc\\downloaded_packages\n```\n:::\n:::\n\n\n## Loading in the Dataset\n\n\n::: {.cell}\n\n```{.r .cell-code}\nACLED_MMR <- read_csv(\"data/MMR.csv\")\n```\n:::\n\n\nLoading in the Shape files for our Admin2 District boundaries.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmmr_shp_mimu_2 <-  st_read(dsn = \"data/geospatial3\",  \n                  layer = \"mmr_polbnda_adm2_250k_mimu\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `mmr_polbnda_adm2_250k_mimu' from data source \n  `C:\\teoose\\VAA-GroupProject(Netlify)\\Prototype\\Geospatial Analysis\\data\\geospatial3' \n  using driver `ESRI Shapefile'\nSimple feature collection with 80 features and 7 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n```\n:::\n:::\n\n\n## Renaming admin1 and admin2 names\n\nThis is to enable our admin1 region names and admin2 district names in our data set to be in sync with our shape files.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nACLED_MMR_1 <- ACLED_MMR %>%\n  mutate(admin1 = case_when(\n    admin1 == \"Bago-East\" ~ \"Bago (East)\",\n    admin1 == \"Bago-West\" ~ \"Bago (West)\",\n    admin1 == \"Shan-North\" ~ \"Shan (North)\",\n    admin1 == \"Shan-South\" ~ \"Shan (South)\",\n    admin1 == \"Shan-East\" ~ \"Shan (East)\",\n    TRUE ~ as.character(admin1)\n  ))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nACLED_MMR_1 <- ACLED_MMR_1 %>%\n  mutate(admin2 = case_when(\n    admin2 == \"Yangon-East\" ~ \"Yangon (East)\",\n    admin2 == \"Yangon-West\" ~ \"Yangon (West)\",\n    admin2 == \"Yangon-North\" ~ \"Yangon (North)\",\n    admin2 == \"Yangon-South\" ~ \"Yangon (South)\",\n    admin2 == \"Mong Pawk (Wa SAD)\" ~ \"Tachileik\",\n    admin2 == \"Nay Pyi Taw\" ~ \"Det Khi Na\",\n    admin2 == \"Yangon\" ~ \"Yangon (West)\",\n    TRUE ~ as.character(admin2)\n  ))\n```\n:::\n\n\n### Data Wrangle for quarterly data\n\nFor our LISA analysis, we will set up our data set for 2021-2023, and in quarterly periods.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nACLED_MMR_2 <- ACLED_MMR_1 %>%\n  filter(year >= 2021 & year <= 2023) %>%\n  mutate(event_date = dmy(event_date),\n         year_month = format(event_date, \"%Y-%m\"),\n         quarter = paste0(year, \"Q\", ceiling(month(event_date) / 3))) %>%\n  filter(event_type != \"Strategic developments\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nEvents2 <- ACLED_MMR_2 %>%\n  group_by(year, quarter, admin2, event_type) %>%\n    summarise(Incidents = n(),\n              Fatalities = sum(fatalities, na.rm = TRUE)) %>%\n              \n    ungroup()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nEvents_2 <- read_csv(\"data/df_complete.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#checking the total no of Incidents and Fatalities from 2021-2023\n\ntotal_incidents1 <- sum(Events2$Incidents)\ntotal_incidents2 <- sum(Events_2$Incidents)\ntotal_fatalities1 <- sum(Events2$Fatalities)\ntotal_fatalities2 <- sum(Events_2$Fatalities)\n\n\ntotal_incidents1 \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 33955\n```\n:::\n\n```{.r .cell-code}\ntotal_incidents2 \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 33955\n```\n:::\n\n```{.r .cell-code}\ntotal_fatalities1 \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 46047\n```\n:::\n\n```{.r .cell-code}\ntotal_fatalities2 \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 46047\n```\n:::\n:::\n\n\nCombining our attribute data to our map shape files.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nEvents_admin2 <- left_join(mmr_shp_mimu_2, Events_2,\n                            by = c(\"DT\" = \"admin2\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nEvents_admin2 <- Events_admin2 %>%\n                      select(-OBJECTID, -ST, -ST_PCODE, \n                             -DT_PCODE, -DT_MMR, -PCode_V)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(Events_admin2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"sf\"         \"data.frame\"\n```\n:::\n:::\n\n\n# Filtering the Event and Quarter\n\nTo test the output of the codes, I shall further filter the dataset to be event_type = Battles, and time period == 2023Q4.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n#Battles_2022 <- Events_admin2 %>%\n  #filter(year == 2023, event_type == \"Battles\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nBattles_data <- Events_admin2 %>%\n  filter(quarter == \"2023Q4\", event_type == \"Battles\")\n```\n:::\n\n\n# Local Measures of Spatial Autocorrelation - `sfdep methods`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\ntm_shape(Battles_data) +\n  tm_fill(\"Incidents\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Incidents\") +\n  \n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2)\n```\n\n::: {.cell-output-display}\n![](GeospatialAnalysis1_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n## Global Measures of Spatial Association\n\nFirst we need to derive the contiguity weights.\n\n## Deriving contiguity weights: Queen’s method\n\nIn the code chunk below, queen method is used to derive the contiguity weights.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q <- Battles_data %>%\n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb,\n                         style = \"W\"),\n         .before = 1) \n```\n:::\n\n\n`st_weights()` provides 3 arguments, they are:\n\n-   *nb*: A neighbor list object as created by `st_neighbours().`\n\n-   *style*: Default “W” for row standardized weights. This value can also be “**B**”, “**C**”, “**U**”, “**minmax**”, and “**S**”.\n\n-   **B** is the basic binary coding, **W** is row standardised (sums over all links to n), **C** is globally standardised (sums over all links to n), **U** is equal to C divided by the number of neighbours (sums over all links to unity), while **S** is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).\n\n-   *allow_zero*: If TRUE, assigns zero as lagged value to zone without neighbors.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 80 features and 8 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                         nb\n1       3, 5, 9, 10, 34, 78\n2                      4, 6\n3        1, 4, 5, 6, 78, 79\n4                2, 3, 5, 6\n5               1, 3, 4, 34\n6               2, 3, 4, 79\n7     8, 10, 22, 72, 78, 79\n8  7, 9, 10, 21, 22, 29, 73\n9          1, 8, 10, 29, 34\n10           1, 7, 8, 9, 78\n                                                                            wt\n1             0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667\n2                                                                     0.5, 0.5\n3             0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667\n4                                                       0.25, 0.25, 0.25, 0.25\n5                                                       0.25, 0.25, 0.25, 0.25\n6                                                       0.25, 0.25, 0.25, 0.25\n7             0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667\n8  0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571\n9                                                      0.2, 0.2, 0.2, 0.2, 0.2\n10                                                     0.2, 0.2, 0.2, 0.2, 0.2\n           DT quarter event_type year Incidents Fatalities\n1    Hinthada  2023Q4    Battles 2023         2          2\n2     Labutta  2023Q4    Battles 2023         0          0\n3      Maubin  2023Q4    Battles 2023         0          0\n4   Myaungmya  2023Q4    Battles 2023         0          0\n5     Pathein  2023Q4    Battles 2023         0          0\n6      Pyapon  2023Q4    Battles 2023         0          0\n7        Bago  2023Q4    Battles 2023        13         50\n8     Taungoo  2023Q4    Battles 2023        27        223\n9        Pyay  2023Q4    Battles 2023        11         27\n10 Thayarwady  2023Q4    Battles 2023        19         25\n                         geometry\n1  MULTIPOLYGON (((95.12637 18...\n2  MULTIPOLYGON (((95.04462 15...\n3  MULTIPOLYGON (((95.38231 17...\n4  MULTIPOLYGON (((94.6942 16....\n5  MULTIPOLYGON (((94.27572 15...\n6  MULTIPOLYGON (((95.20798 15...\n7  MULTIPOLYGON (((95.90674 18...\n8  MULTIPOLYGON (((96.17964 19...\n9  MULTIPOLYGON (((95.70458 19...\n10 MULTIPOLYGON (((95.85173 18...\n```\n:::\n:::\n\n\n### Computing Global Moran’s I statistics\n\nIn the code chunk below, `global_moran(`) function is used to compute the Moran’s I value. Different from spdep package, the output is a tibble data.frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmoranI <- global_moran(wm_q$Incidents,\n                       wm_q$nb,\n                       wm_q$wt)\nglimpse(moranI)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 2\n $ I: num 0.237\n $ K: num 16.7\n```\n:::\n:::\n\n\n### Performing Global Moran’s I test\n\nIn general, Moran’s I test will be performed instead of just computing the Moran’s I statistics. With sfdep package, Moran’s I test can be performed by using [`global_moran_test()`](https://sfdep.josiahparry.com/reference/global_moran_test.html) as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_moran_test(wm_q$Incidents,\n                       wm_q$nb,\n                       wm_q$wt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tMoran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 3.713, p-value = 0.0001024\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.236932783      -0.012658228       0.004518538 \n```\n:::\n:::\n\n\n### Performing Global Moran’s I permutation test\n\nIn practice, monte carlo simulation should be used to perform the statistical test. For **sfdep**, it is supported by [`global_moran_perm()`](https://sfdep.josiahparry.com/reference/global_moran_perm.html)\n\nIt is a good practice to use `set.seed()` before performing simulation. This is to ensure that the computation is reproducible.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n```\n:::\n\n\nNext, `global_moran_perm()` is used to perform Monte Carlo simulation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_moran_perm(wm_q$Incidents,\n                       wm_q$nb,\n                       wm_q$wt,\n                  nsim = 99)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.23693, observed rank = 100, p-value < 2.2e-16\nalternative hypothesis: two.sided\n```\n:::\n:::\n\n\nThe statistical report above show that the p-value is smaller than alpha value of 0.05. Hence, we have enough statistical evidence to reject the null hypothesis that the spatial distribution of Incidents for event type==Battle, resemble random distribution (i.e. independent from spatial). Because the Moran’s I statistics is greater than 0. We can infer that the spatial distribution shows sign of clustering.\n\n## Computing local Moran’s I\n\nNext, we compute Local Moran’s I of Incidents at admin 2 level (Districts) by using [`local_moran()`](https://sfdep.josiahparry.com/reference/local_moran.html) of sfdep package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlisa <- wm_q %>% \n  mutate(local_moran = local_moran(\n    Incidents, nb, wt, nsim = 99),\n         .before = 1) %>%\n  unnest(local_moran)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlisa\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 80 features and 20 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n# A tibble: 80 × 21\n        ii      eii  var_ii   z_ii   p_ii p_ii_sim p_folded_sim skewness\n     <dbl>    <dbl>   <dbl>  <dbl>  <dbl>    <dbl>        <dbl>    <dbl>\n 1  0.264  -0.0177  0.0614   1.14  0.256      0.2          0.1    -0.931\n 2  0.451   0.0459  0.170    0.981 0.327      0.08         0.07   -2.01 \n 3  0.432  -0.0115  0.0708   1.67  0.0958     0.02         0.01   -1.14 \n 4  0.451  -0.0111  0.112    1.38  0.168      0.02         0.01   -1.39 \n 5  0.429   0.00269 0.108    1.30  0.195      0.06         0.03   -1.36 \n 6  0.436   0.0111  0.118    1.24  0.216      0.04         0.02   -1.81 \n 7  0.0242 -0.00466 0.00292  0.534 0.594      0.6          0.3    -1.55 \n 8 -0.185   0.00114 0.0425  -0.905 0.365      0.3          0.15    1.13 \n 9  0.0509 -0.0107  0.00882  0.656 0.512      0.58         0.29   -1.06 \n10 -0.0307  0.00405 0.00432 -0.528 0.597      0.64         0.32    1.33 \n# ℹ 70 more rows\n# ℹ 13 more variables: kurtosis <dbl>, mean <fct>, median <fct>, pysal <fct>,\n#   nb <nb>, wt <list>, DT <chr>, quarter <chr>, event_type <chr>, year <dbl>,\n#   Incidents <dbl>, Fatalities <dbl>, geometry <MULTIPOLYGON [°]>\n```\n:::\n:::\n\n\nThe output of `local_moran()` is a sf data.frame containing the columns ii, eii, var_ii, z_ii, p_ii, p_ii_sim, and p_folded_sim.\n\n-   ii: local moran statistic\n\n-   eii: expectation of local moran statistic; for localmoran_permthe permutation sample means\n\n-   var_ii: variance of local moran statistic; for localmoran_permthe permutation sample standard deviations\n\n-   z_ii: standard deviate of local moran statistic; for localmoran_perm based on permutation sample means and standard deviations\n\n-   p_ii: p-value of local moran statistic using pnorm(); for localmoran_perm using standard deviation based on permutation sample means and standard deviations p_ii_sim: For `localmoran_perm()`, `rank()` and `punif()` of observed statistic rank for \\[0, 1\\] p-values using `alternative=` -p_folded_sim: the simulation folded \\[0, 0.5\\] range ranked p-value\n\n-   skewness: For `localmoran_perm`, the output of e1071::skewness() for the permutation samples underlying the standard deviates\n\n-   kurtosis: For `localmoran_perm`, the output of e1071::kurtosis() for the permutation samples underlying the standard deviates.\n\n### Visualising local Moran’s I\n\nIn this code chunk below, tmap functions are used to prepare a choropleth map by using value in the *ii* field.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\ntm_shape(lisa) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"local Moran's I of Incidents\",\n            main.title.size = 0.8)\n```\n\n::: {.cell-output-display}\n![](GeospatialAnalysis1_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n### Visualising p-value of local Moran’s I\n\nIn the code chunk below, tmap functions are used prepare a choropleth map by using value in the *p_ii_sim* field.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\ntm_shape(lisa) +\n  tm_fill(\"p_ii_sim\") + \n  tm_borders(alpha = 0.5) +\n   tm_layout(main.title = \"p-value of local Moran's I\",\n            main.title.size = 0.8)\n```\n\n::: {.cell-output-display}\n![](GeospatialAnalysis1_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n### Visuaising local Moran’s I and p-value\n\nFor effective comparison, it will be better for us to plot both maps next to each other as shown below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\nmap1 <- tm_shape(lisa) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"local Moran's I of Incidents\",\n            main.title.size = 0.8)\n\nmap2 <- tm_shape(lisa) +\n  tm_fill(\"p_ii\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n              labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")) + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"p-value of local Moran's I\",\n            main.title.size = 0.8)\n\ntmap_arrange(map1, map2, ncol = 2)\n```\n\n::: {.cell-output-display}\n![](GeospatialAnalysis1_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n### Visualising LISA map\n\nLISA map is a categorical map showing outliers and clusters. There are two types of outliers namely: High-Low and Low-High outliers. Likewise, there are two type of clusters namely: High-High and Low-Low clusters. LISA map is an interpreted map by combining local Moran’s I of geographical areas and their respective p-values.\n\nIn lisa sf data.frame, we can find three fields contain the LISA categories. They are *mean*, *median* and *pysal*. In general, classification in *mean* will be used as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlisa_sig <- lisa  %>%\n  filter(p_ii < 0.05)\ntmap_mode(\"plot\")\ntm_shape(lisa) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(lisa_sig) +\n  tm_fill(\"mean\") + \n  tm_borders(alpha = 0.4)\n```\n\n::: {.cell-output-display}\n![](GeospatialAnalysis1_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n## Hot Spot and Cold Spot Area Analysis (HCSA)\n\nHCSA uses spatial weights to identify locations of statistically significant hot spots and cold spots in an spatially weighted attribute that are in proximity to one another based on a **calculated distance**. The analysis groups **features** when similar high (hot) or low (cold) values are found in a cluster. The polygon features usually represent administration boundaries or a custom grid structure.\n\n## Computing local Gi\\* statistics\n\nSimilarly, we will need to first derive a spatial weight matrix before we can compute local Gi\\* statistics. Code chunk below will be used to derive a spatial weight matrix by using sfdep functions and tidyverse approach.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_idw <- Battles_data %>%\n  mutate(nb = st_contiguity(geometry),\n         wts = st_inverse_distance(nb, geometry,\n                                   scale = 1,\n                                   alpha = 1),\n         .before = 1)\n```\n:::\n\n\nGi\\* and local Gi\\* are distance-based spatial statistics. Hence, distance methods instead of contiguity methods are used to derive the spatial weight matrix.\n\nNext, we will compute the local Gi\\* by using the code below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHCSA <- wm_idw %>% \n  mutate(local_Gi = local_gstar_perm(\n    Incidents, nb, wt, nsim = 99),\n         .before = 1) %>%\n  unnest(local_Gi)\nHCSA\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 80 features and 18 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n# A tibble: 80 × 19\n   gi_star cluster    e_gi    var_gi std_dev p_value p_sim p_folded_sim skewness\n     <dbl> <fct>     <dbl>     <dbl>   <dbl>   <dbl> <dbl>        <dbl>    <dbl>\n 1  -1.29  Low     0.0106  0.0000433  -1.04    0.300  0.24         0.12    1.09 \n 2  -1.18  Low     0.00853 0.000110   -0.814   0.415  0.1          0.01    1.92 \n 3  -1.78  Low     0.0101  0.0000409  -1.50    0.133  0.04         0.02    1.11 \n 4  -1.54  Low     0.00878 0.0000451  -1.31    0.191  0.02         0.01    1.37 \n 5  -1.48  Low     0.00863 0.0000330  -1.42    0.156  0.04         0.02    0.751\n 6  -1.50  Low     0.0102  0.0000453  -1.46    0.143  0.06         0.03    1.22 \n 7  -0.537 Low     0.0125  0.0000489  -0.518   0.604  0.68         0.34    1.82 \n 8  -0.818 High    0.0142  0.0000445  -1.02    0.305  0.24         0.11    0.981\n 9  -0.618 Low     0.0120  0.0000359  -0.681   0.496  0.56         0.28    0.650\n10  -0.401 High    0.0121  0.0000392  -0.401   0.688  0.74         0.37    1.05 \n# ℹ 70 more rows\n# ℹ 10 more variables: kurtosis <dbl>, nb <nb>, wts <list>, DT <chr>,\n#   quarter <chr>, event_type <chr>, year <dbl>, Incidents <dbl>,\n#   Fatalities <dbl>, geometry <MULTIPOLYGON [°]>\n```\n:::\n:::\n\n\n### Visualising Gi\\*\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\ntm_shape(HCSA) +\n  tm_fill(\"gi_star\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8))\n```\n\n::: {.cell-output-display}\n![](GeospatialAnalysis1_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n### Visualising p-value of HCSA\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\ntm_shape(HCSA) +\n  tm_fill(\"p_sim\") + \n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](GeospatialAnalysis1_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\n### Visualising local HCSA\n\nFor effective comparison, we can plot both maps next to each other as shown below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\nmap1 <- tm_shape(HCSA) +\n  tm_fill(\"gi_star\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"Gi* of Incidents\",\n            main.title.size = 0.8)\n\nmap2 <- tm_shape(HCSA) +\n  tm_fill(\"p_value\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n              labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")) + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"p-value of Gi*\",\n            main.title.size = 0.8)\n\ntmap_arrange(map1, map2, ncol = 2)\n```\n\n::: {.cell-output-display}\n![](GeospatialAnalysis1_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\n## Visualising hot spot and cold spot areas\n\nFinally, we plot the **significant (i.e. p-values less than 0.05)** hot spot and cold spot areas by using appropriate tmap functions as shown below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHCSA_sig <- HCSA  %>%\n  filter(p_value < 0.05)\ntmap_mode(\"plot\")\ntm_shape(HCSA) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(HCSA_sig) +\n  tm_fill(\"gi_star\") + \n  tm_borders(alpha = 0.4)\n```\n\n::: {.cell-output-display}\n![](GeospatialAnalysis1_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\nFigure above reveals that there are several hot spot areas and these areas also coincide with the High-High cluster identified by using local Moran’s I method in the earlier sub-section.\n\n## References\n\nMain reference: Kam, T.S. (2024). [Global and Local Measures of Spatial Autocorrelation - sfdep methods](https://is415-gaa-tskam.netlify.app/in-class_ex/in-class_ex05/in-class_ex05-glsa#computing-local-morans-i)\n\n## \n",
    "supporting": [
      "GeospatialAnalysis1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}