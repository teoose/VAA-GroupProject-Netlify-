{
  "hash": "2f7916c75aa14844fff6aaa679d38e69",
  "result": {
    "markdown": "---\ntitle: \"Geospatial Analysis2 - Emerging Hot Spot Analysis\"\ndate: \"17 March 2024\"\ndate-modified: \"last-modified\"\nauthor: \"Imran Ibrahim\"\ntoc: true\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n  warning: false\n  message: false\n---\n\n\n# Overview\n\nIn this page, I will be exploring the codes for the plots in our Geospatial Analysis module of our Shiny Application. Specifically, I will be plotting the **Emerging Hot Spot Map**.\n\n# Emerging Hot Spot Analysis: sfdep methods\n\nEmerging Hot Spot Analysis (EHSA) is a spatio-temporal analysis method for revealing and describing how hot spot and cold spot areas evolve over time.\n\nThe analysis consist of four main steps:\n\n-   Building a space-time cube,\n\n-   Calculating Getis-Ord local Gi\\* statistic for each bin by using an FDR correction,\n\n-   Evaluating these hot and cold spot trends by using Mann-Kendall trend test,\n\n-   Categorising each study area location by referring to the resultant trend z-score and p-value for each location with data, and with the hot spot z-score and p-value for each bin.\n\n# Loading R Packages and Data Prep\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, dplyr , \n               sf, lubridate,plotly,\n               tmap, spdep, sfdep)\n```\n:::\n\n\nShapes files for Myanmar admin2 levels\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmmr_shp_mimu_2 <-  st_read(dsn = \"data/geospatial3\",  \n                  layer = \"mmr_polbnda_adm2_250k_mimu\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `mmr_polbnda_adm2_250k_mimu' from data source \n  `C:\\teoose\\VAA-GroupProject(Netlify)\\Prototype\\Geospatial Analysis\\data\\geospatial3' \n  using driver `ESRI Shapefile'\nSimple feature collection with 80 features and 7 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n```\n:::\n:::\n\n\n## Data Wrangle for quarterly data\n\nAs per project requirements, we will sync the time frame for this analysis to be the same as our previous LISA analysis. Therefore, we will set up the data set to be for 2021-2023, and in quarterly periods\n\nI won't repeat the data prep steps again, as this has already been done in previous prototype page. I will read in the previously prepared quarterly data for 2021-2023 instead.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nEvents_2 <- read_csv(\"data/df1_complete.csv\")\n```\n:::\n\n\nSince this data set has been filled up for missing values, using `tidyr::complete()` , I can proceed to use the standard spacetime constructor ie [`spacetime()`](https://sfdep.josiahparry.com/reference/spacetime.html)\n\n# Creating a Time Series Cube\n\nIn the code chunk below, [`spacetime()`](https://sfdep.josiahparry.com/reference/spacetime.html) of sfdep is used to create an spatio-temporal cube.\n\nFirst, loc_col identifier needs to be the same name for both data and shape file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nEvents_2 <- Events_2 %>%\n        filter(event_type == \"Battles\") %>%\n        rename(DT=admin2) %>%\n        select(-event_type, -year, -Fatalities) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nQuarterly_spt <- spacetime(Events_2, mmr_shp_mimu_2,\n                      .loc_col = \"DT\",\n                      .time_col = \"quarter\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nis_spacetime_cube(Quarterly_spt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n# Computing Gi\\*\n\nNext, we will compute the local Gi\\* statistics.\n\n### Deriving the spatial weights\n\nThe code below will be used to identify neighbors and to derive an inverse distance weights.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nQuarterly_nb <- Quarterly_spt %>%\n  activate(\"geometry\") %>%\n  mutate(nb = include_self(st_contiguity(geometry)),\n         wt = st_inverse_distance(nb, geometry,\n                                  scale = 1,\n                                  alpha = 1),\n         .before = 1) %>%\n  set_nbs(\"nb\") %>%\n  set_wts(\"wt\")\n```\n:::\n\n\n::: callout-note\n## Note\n\n-   `activate()` of dplyr package is used to activate the geometry context\n\n-   `mutate()` of dplyr package is used to create two new columns *nb* and *wt*.\n\n-   Then we will activate the data context again and copy over the nb and wt columns to each time-slice using `set_nbs()` and `set_wts()`\n\n    -   row order is very important so do not rearrange the observations after using `set_nbs()` or `set_wts()`.\n:::\n\nNote that the data sets now have neighbors and weights for each time-slice.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(Quarterly_nb)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 5\n  quarter DT        Incidents nb        wt       \n    <dbl> <chr>         <dbl> <list>    <list>   \n1   20211 Hinthada          0 <int [7]> <dbl [7]>\n2   20211 Labutta           0 <int [3]> <dbl [3]>\n3   20211 Maubin            0 <int [7]> <dbl [7]>\n4   20211 Myaungmya         0 <int [5]> <dbl [5]>\n5   20211 Pathein           0 <int [5]> <dbl [5]>\n6   20211 Pyapon            0 <int [5]> <dbl [5]>\n```\n:::\n:::\n\n\n## Computing Gi\\*\n\nWe can use these new columns to manually calculate the local Gi\\* for each location. We can do this by grouping by *year* and using `local_gstar_perm()` of sfdep package. After which, we `use unnest()` to unnest *gi_star* column of the newly created *gi_starts* data.frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#for Quarterly admin 2\ngi_stars3 <- Quarterly_nb %>% \n  group_by(quarter) %>% \n  mutate(gi_star = local_gstar_perm(\n    Incidents, nb, wt)) %>% \n  tidyr::unnest(gi_star)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngi_stars3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 960 × 15\n# Groups:   quarter [12]\n   quarter DT      Incidents nb    wt    gi_star cluster    e_gi  var_gi std_dev\n     <dbl> <chr>       <dbl> <lis> <lis>   <dbl> <fct>     <dbl>   <dbl>   <dbl>\n 1   20211 Hintha…         0 <int> <dbl>  -0.938 Low     0.00935 1.49e-4 -0.767 \n 2   20211 Labutta         0 <int> <dbl>  -0.645 Low     0.00634 1.96e-4 -0.453 \n 3   20211 Maubin          0 <int> <dbl>  -0.938 Low     0.00960 1.54e-4 -0.772 \n 4   20211 Myaung…         0 <int> <dbl>  -0.801 Low     0.00886 1.82e-4 -0.657 \n 5   20211 Pathein         0 <int> <dbl>  -0.801 Low     0.00819 1.69e-4 -0.630 \n 6   20211 Pyapon          0 <int> <dbl>  -0.801 Low     0.00887 1.71e-4 -0.679 \n 7   20211 Bago            1 <int> <dbl>   0.321 Low     0.0105  1.37e-4  0.532 \n 8   20211 Taungoo         8 <int> <dbl>   0.432 High    0.0206  1.02e-4 -0.263 \n 9   20211 Pyay            0 <int> <dbl>  -0.337 Low     0.00932 1.65e-4 -0.128 \n10   20211 Thayar…         0 <int> <dbl>  -0.270 Low     0.00912 1.52e-4 -0.0395\n# ℹ 950 more rows\n# ℹ 5 more variables: p_value <dbl>, p_sim <dbl>, p_folded_sim <dbl>,\n#   skewness <dbl>, kurtosis <dbl>\n```\n:::\n:::\n\n\n# Mann-Kendall Test\n\nWith these Gi\\* measures we can then evaluate each location for a trend using the Mann-Kendall test.\n\nThe code chunk below uses Hinthada region.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncbg3 <- gi_stars3 %>% \n  ungroup() %>% \n  filter(DT == \"Hinthada\") |> \n  select(DT, quarter, gi_star)\n```\n:::\n\n\nNext, we plot the result by using ggplotly() of plotly package.\n\n**Hinthada district quarterly**\n\n\n::: {.cell}\n\n```{.r .cell-code}\np3 <- ggplot(data = cbg3, \n       aes(x = quarter, \n           y = gi_star)) +\n  geom_line() +\n  theme_light()\n\nggplotly(p3)\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"plotly html-widget html-fill-item\" id=\"htmlwidget-224aac3509f1a83bd3ca\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-224aac3509f1a83bd3ca\">{\"x\":{\"data\":[{\"x\":[20211,20212,20213,20214,20221,20222,20223,20224,20231,20232,20233,20234],\"y\":[-0.93751257944361199,-1.27667486743152,-1.685214447206653,-1.4719409717472254,-1.6682469649078393,-1.6589364706864278,-1.9726482068457223,-1.8280863415982889,-1.5849030767048147,-1.6875167576840768,-1.6749279580579677,-1.4351478905503112],\"text\":[\"quarter: 20211<br />gi_star: -0.9375126\",\"quarter: 20212<br />gi_star: -1.2766749\",\"quarter: 20213<br />gi_star: -1.6852144\",\"quarter: 20214<br />gi_star: -1.4719410\",\"quarter: 20221<br />gi_star: -1.6682470\",\"quarter: 20222<br />gi_star: -1.6589365\",\"quarter: 20223<br />gi_star: -1.9726482\",\"quarter: 20224<br />gi_star: -1.8280863\",\"quarter: 20231<br />gi_star: -1.5849031\",\"quarter: 20232<br />gi_star: -1.6875168\",\"quarter: 20233<br />gi_star: -1.6749280\",\"quarter: 20234<br />gi_star: -1.4351479\"],\"type\":\"scatter\",\"mode\":\"lines\",\"line\":{\"width\":1.8897637795275593,\"color\":\"rgba(0,0,0,1)\",\"dash\":\"solid\"},\"hoveron\":\"points\",\"showlegend\":false,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null}],\"layout\":{\"margin\":{\"t\":26.228310502283104,\"r\":7.3059360730593621,\"b\":40.182648401826491,\"l\":48.949771689497723},\"plot_bgcolor\":\"rgba(255,255,255,1)\",\"paper_bgcolor\":\"rgba(255,255,255,1)\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[20209.849999999999,20235.150000000001],\"tickmode\":\"array\",\"ticktext\":[\"20210\",\"20215\",\"20220\",\"20225\",\"20230\",\"20235\"],\"tickvals\":[20210,20215,20220,20225,20230,20235],\"categoryorder\":\"array\",\"categoryarray\":[\"20210\",\"20215\",\"20220\",\"20225\",\"20230\",\"20235\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(179,179,179,1)\",\"ticklen\":3.6529680365296811,\"tickwidth\":0.33208800332088001,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.68949771689498},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":true,\"gridcolor\":\"rgba(222,222,222,1)\",\"gridwidth\":0.33208800332088001,\"zeroline\":false,\"anchor\":\"y\",\"title\":{\"text\":\"quarter\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724}},\"hoverformat\":\".2f\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[-2.0244049882158279,-0.88575579807350646],\"tickmode\":\"array\",\"ticktext\":[\"-1.8\",\"-1.5\",\"-1.2\",\"-0.9\"],\"tickvals\":[-1.8000000000000005,-1.5000000000000004,-1.2000000000000004,-0.90000000000000036],\"categoryorder\":\"array\",\"categoryarray\":[\"-1.8\",\"-1.5\",\"-1.2\",\"-0.9\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(179,179,179,1)\",\"ticklen\":3.6529680365296811,\"tickwidth\":0.33208800332088001,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.68949771689498},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":true,\"gridcolor\":\"rgba(222,222,222,1)\",\"gridwidth\":0.33208800332088001,\"zeroline\":false,\"anchor\":\"x\",\"title\":{\"text\":\"gi_star\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724}},\"hoverformat\":\".2f\"},\"shapes\":[{\"type\":\"rect\",\"fillcolor\":\"transparent\",\"line\":{\"color\":\"rgba(179,179,179,1)\",\"width\":0.66417600664176002,\"linetype\":\"solid\"},\"yref\":\"paper\",\"xref\":\"paper\",\"x0\":0,\"x1\":1,\"y0\":0,\"y1\":1}],\"showlegend\":false,\"legend\":{\"bgcolor\":\"rgba(255,255,255,1)\",\"bordercolor\":\"transparent\",\"borderwidth\":1.8897637795275593,\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":11.68949771689498}},\"hovermode\":\"closest\",\"barmode\":\"relative\"},\"config\":{\"doubleClick\":\"reset\",\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"source\":\"A\",\"attrs\":{\"1d983ef83dc7\":{\"x\":{},\"y\":{},\"type\":\"scatter\"}},\"cur_data\":\"1d983ef83dc7\",\"visdat\":{\"1d983ef83dc7\":[\"function (y) \",\"x\"]},\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\nMann Kendall test for **Hinthada district-quarterly**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncbg3 %>%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %>% \n  tidyr::unnest_wider(mk)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 5\n     tau    sl     S     D  varS\n   <dbl> <dbl> <dbl> <dbl> <dbl>\n1 -0.242 0.304   -16  66.0  213.\n```\n:::\n:::\n\n\nValues of Mann Kendall test.\n\n|        |                         |\n|--------|-------------------------|\n| `tau`  | Kendall's tau statistic |\n| `sl`   | two-sided p-value       |\n| `S`    | Kendall Score           |\n| `D`    | denominator, tau=S/D    |\n| `varS` | variance of S           |\n\nWe can replicate this for each location by using `group_by()` of dplyr package.\n\n**Admin 2 districts-quarterly**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nehsa3 <- gi_stars3 %>%\n  group_by(DT) %>%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %>%\n  tidyr::unnest_wider(mk)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nehsa3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 80 × 6\n   DT                              tau     sl     S     D  varS\n   <chr>                         <dbl>  <dbl> <dbl> <dbl> <dbl>\n 1 Bago                        -0.0606 0.837     -4  66.0  213.\n 2 Bawlake                     -0.333  0.150    -22  66.0  213.\n 3 Bhamo                       -0.303  0.193    -20  66.0  213.\n 4 Danu Self-Administered Zone -0.394  0.0865   -26  66.0  213.\n 5 Dawei                        0.515  0.0236    34  66.0  213.\n 6 Det Khi Na                  -0.212  0.373    -14  66.0  213.\n 7 Falam                       -0.333  0.150    -22  66.0  213.\n 8 Gangaw                       0.121  0.631      8  66.0  213.\n 9 Hakha                       -0.0303 0.945     -2  66.0  213.\n10 Hinthada                    -0.242  0.304    -16  66.0  213.\n# ℹ 70 more rows\n```\n:::\n:::\n\n\n## Arrange to show significant emerging hot/cold spots\n\nAdmin 2 districts-quarterly\n\n\n::: {.cell}\n\n```{.r .cell-code}\nemerging3 <- ehsa3 %>% \n  arrange(sl, abs(tau)) %>% \n  slice(1:5)\n\nemerging3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 6\n  DT               tau      sl     S     D  varS\n  <chr>          <dbl>   <dbl> <dbl> <dbl> <dbl>\n1 Mandalay       0.667 0.00319    44  66.0  213.\n2 Maubin        -0.667 0.00319   -44  66.0  213.\n3 Pyapon        -0.667 0.00319   -44  66.0  213.\n4 Pyinoolwin     0.636 0.00493    42  66.0  213.\n5 Yangon (West) -0.636 0.00493   -42  66.0  213.\n```\n:::\n:::\n\n\n## Performing Emerging Hotspot Analysis\n\nLastly, we will perform EHSA analysis by using [`emerging_hotspot_analysis()`](https://sfdep.josiahparry.com/reference/emerging_hotspot_analysis.html) of sfdep package. It takes a spacetime object x (i.e quarterly_spt), and the quoted name of the variable of interest (i.e. Incidents) for .var argument.\n\nThe **k argument is used to specify the** **number of time lags** which is set to 1 by default.\n\nLastly, **nsim map** **numbers of simulation** to be performed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nehsa3 <- emerging_hotspot_analysis(\n  x = Quarterly_spt, \n  .var = \"Incidents\", \n  k = 1, \n  nsim = 99\n)\n```\n:::\n\n\n### Visualising the distribution of EHSA classes\n\nIn the code chunk below, ggplot2 functions is used to reveal the distribution of EHSA classes as a bar chart.\n\n**Admin2 districts - quarterly**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#| fig-width: 12\n#| fig-height: 7\n#| column: body-outset-right\n\nggplot(data = ehsa3,\n       aes(x = classification)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](GeospatialAnalysis2_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n### Visualising EHSA\n\nIn this section, we will visualise the geographic distribution EHSA classes. However, before we can do so, we need to join *(mmr_shp_mimu2 & ehsa3)* together by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmmr3_ehsa <- mmr_shp_mimu_2 %>%\n  left_join(ehsa3,\n            by = join_by(DT == location))\n```\n:::\n\n\nNext, tmap functions will be used to plot a categorical choropleth map by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#| fig-width: 10\n#| fig-height: 7\n#| column: body-outset-right\n\nehsa_sig3 <- mmr3_ehsa  %>%\n  filter(p_value < 0.05)\n\ntmap_mode(\"plot\")\n\ntm_shape(mmr3_ehsa) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(ehsa_sig3) +\n  tm_fill(\"classification\") + \n  tm_borders(alpha = 0.4)\n```\n\n::: {.cell-output-display}\n![](GeospatialAnalysis2_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n## References\n\nMain reference: Kam, T.S. (2024). [Emerging Hot Spot Analysis: sfdep methods](https://is415-gaa-tskam.netlify.app/in-class_ex/in-class_ex05/in-class_ex05-ehsa)\n",
    "supporting": [
      "GeospatialAnalysis2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\r\n<script src=\"../../site_libs/plotly-binding-4.10.3/plotly.js\"></script>\r\n<script src=\"../../site_libs/typedarray-0.1/typedarray.min.js\"></script>\r\n<script src=\"../../site_libs/jquery-3.5.1/jquery.min.js\"></script>\r\n<link href=\"../../site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\r\n<link href=\"../../site_libs/plotly-htmlwidgets-css-2.11.1/plotly-htmlwidgets.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/plotly-main-2.11.1/plotly-latest.min.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}